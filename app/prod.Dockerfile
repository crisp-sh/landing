# app/prod.Dockerfile

# ---- Builder Stage ----
# Use an official Node.js LTS version on Alpine Linux as a build environment
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install pnpm globally (required as it's not in the base image)
# Pinning the pnpm version can improve build reproducibility
RUN npm install -g pnpm

# Copy package manifests
# Leverage Docker cache: these layers are only invalidated if package.json or pnpm-lock.yaml change
COPY package.json pnpm-lock.yaml ./

# Install dependencies using the lockfile
# Includes devDependencies needed for the build
RUN pnpm install --frozen-lockfile

# Copy the rest of the application source code
# This includes components, lib, styles, public, next.config.mjs, etc.
# Ensure your .dockerignore prevents copying unnecessary files (like .git, node_modules outside build stage)
COPY . .
# Note: Since this Dockerfile is in app/, but the context is the root,
# COPY . . copies everything from the project root into /app in the container.

# Build the Next.js application
# This will generate the .next directory, including .next/standalone and .next/static
RUN pnpm build

# ---- Runner Stage ----
# Use a minimal Node.js Alpine image for the final production image
FROM node:20-alpine AS runner

# Set working directory
WORKDIR /app

# Set production environment
ENV NODE_ENV production
# Prevent Next.js telemetry
ENV NEXT_TELEMETRY_DISABLED 1
# Recommended: Listen on all interfaces within the container
ENV HOSTNAME "0.0.0.0"
# Default port Next.js runs on
ENV PORT 3000

# Create a non-root user and group for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy only the necessary artifacts from the builder stage
# Requires output: 'standalone' in next.config.mjs

# Copy the standalone server output (including pruned node_modules)
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./

# Copy the static assets generated by the build
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy the public directory
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Set the user to the non-root user
USER nextjs

# Expose the port the app runs on
EXPOSE 3000

# Command to run the Next.js server
# The entrypoint is server.js in the .next/standalone directory
CMD ["node", "server.js"]

# Optional: Add a basic healthcheck
# Adjust the path if your root doesn't return 200 OK
# HEALTHCHECK --interval=30s --timeout=5s --start-period=10s CMD curl --fail http://localhost:3000/ || exit 1