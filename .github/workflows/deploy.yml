# .github/workflows/deploy.yml
name: Build and Push Docker Image to GHCR

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  # Image name will be ghcr.io/your-github-username/your-repo-name (all lowercase)
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    # Grant permissions for actions to push to GHCR
    permissions:
      contents: read      # Needed to check out the repository
      packages: write     # Needed to push packages (Docker images) to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # The user/actor running the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub automatically creates this token

      - name: Extract metadata (tags, labels) for Docker
        id: meta # Give this step an ID so we can reference its outputs
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Define tagging rules:
          tags: |
            # type=sha - tag with the git commit sha (short format)
            type=sha,prefix=,suffix=,format=short
            # type=raw,value=latest - tag with 'latest' only for the default branch (usually main)
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # Buildx enables advanced features like multi-platform builds and better caching

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Set the build context to the repository root
          file: ./app/prod.Dockerfile # Specify the path to your Dockerfile
          push: true # Tell the action to push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the metadata-action
          labels: ${{ steps.meta.outputs.labels }} # Use the labels generated by the metadata-action
          # Enable build cache (optional but recommended for faster builds)
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image Digest # Optional: Output the image digest for reference
        run: echo ${{ steps.docker_build.outputs.digest }}